// <auto-generated />
using System;
using Gardener.EntityFramwork.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gardener.Api.Core.Migrations.GardenerAuditDb
{
    [DbContext(typeof(GardenerAuditDbContext))]
    [Migration("20230509140603_v0.0.1")]
    partial class v001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AuditOperationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreateIdentityType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperaterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OperaterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OperaterType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperationType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateIdentityType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuditOperationId");

                    b.ToTable("AuditEntity");
                });

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreateIdentityType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Method")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperaterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperaterName")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperaterType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameters")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResourceName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateIdentityType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditOperation");
                });

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuditEntityid")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreateBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreateIdentityType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CreatedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdateIdentityType")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UpdatedTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuditEntityid");

                    b.ToTable("AuditProperty");
                });

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditEntity", b =>
                {
                    b.HasOne("Gardener.Base.Entity.Domains.AuditOperation", null)
                        .WithMany("AuditEntities")
                        .HasForeignKey("AuditOperationId");
                });

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditProperty", b =>
                {
                    b.HasOne("Gardener.Base.Entity.Domains.AuditEntity", "AuditEntity")
                        .WithMany("AuditProperties")
                        .HasForeignKey("AuditEntityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditEntity");
                });

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditEntity", b =>
                {
                    b.Navigation("AuditProperties");
                });

            modelBuilder.Entity("Gardener.Base.Entity.Domains.AuditOperation", b =>
                {
                    b.Navigation("AuditEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
