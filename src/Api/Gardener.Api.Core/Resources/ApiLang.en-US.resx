<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Client login fail" xml:space="preserve">
    <value>Client login fail</value>
  </data>
  <data name="Client no find" xml:space="preserve">
    <value>Client no find</value>
  </data>
  <data name="Code generation template compilation error" xml:space="preserve">
    <value>Code generation template compilation error</value>
  </data>
  <data name="Controller need comment" xml:space="preserve">
    <value>Controller need comment</value>
  </data>
  <data name="Email server no find" xml:space="preserve">
    <value>Email server no find</value>
  </data>
  <data name="Filter group operate error" xml:space="preserve">
    <value>Filter group operate error</value>
  </data>
  <data name="Forbidden" xml:space="preserve">
    <value>Forbidden</value>
  </data>
  <data name="No includ file" xml:space="preserve">
    <value>No includ file</value>
  </data>
  <data name="Refresh The token does not exist or has expired" xml:space="preserve">
    <value>Refresh The token does not exist or has expired</value>
  </data>
  <data name="RefreshToken cannot used in authentication" xml:space="preserve">
    <value>RefreshToken cannot used in authentication</value>
  </data>
  <data name="Request url is invalid" xml:space="preserve">
    <value>Request url is invalid</value>
  </data>
  <data name="Resource key repeat" xml:space="preserve">
    <value>Resource key repeat</value>
  </data>
  <data name="SugarRepository initialize error" xml:space="preserve">
    <value>SugarRepository initialize error</value>
  </data>
  <data name="System error,Please contact the administrator" xml:space="preserve">
    <value>System error,Please contact the administrator</value>
  </data>
  <data name="Table name exist" xml:space="preserve">
    <value>Table name exist</value>
  </data>
  <data name="Task allready exist" xml:space="preserve">
    <value>Task allready exist</value>
  </data>
  <data name="Task not exist" xml:space="preserve">
    <value>Task not exist</value>
  </data>
  <data name="The value cannot be empty or null" xml:space="preserve">
    <value>The value cannot be empty or null</value>
  </data>
  <data name="The “{0}” value converter cannot be found" xml:space="preserve">
    <value>The “{0}” value converter cannot be found</value>
  </data>
  <data name="Timespan is expired" xml:space="preserve">
    <value>Timespan is expired</value>
  </data>
  <data name="Token invalid" xml:space="preserve">
    <value>Token invalid</value>
  </data>
  <data name="Unauthorized" xml:space="preserve">
    <value>Unauthorized</value>
  </data>
  <data name="User locked" xml:space="preserve">
    <value>User locked</value>
  </data>
  <data name="User name or password error" xml:space="preserve">
    <value>User name or password error</value>
  </data>
  <data name="User name repeat" xml:space="preserve">
    <value>User name repeat</value>
  </data>
  <data name="Verify code verification failed" xml:space="preserve">
    <value>Verify code verification failed</value>
  </data>
  <data name="“{0}” attribute not found in “{1}” type" xml:space="preserve">
    <value>“{0}” attribute not found in “{1}” type</value>
  </data>
</root>